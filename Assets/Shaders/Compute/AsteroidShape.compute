// includes
#include "./Includes/Noise/FractalNoise.cginc"
#include "./Includes/ShapeComputeUtil.cginc"
#include "./Includes/SmoothMinMax.cginc"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel compute_shape

// Vertex information
StructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> out_vertices;
RWStructuredBuffer<float3> normals;
uint num_of_vertices;

// Settings
float radius;
// Shape Settings
int4 enabled[1];
float4 noise_settings_shape[3];
float4 noise_settings_general[3];
float4 noise_settings_crater[4];

[numthreads(256, 1, 1)] void compute_shape(uint id
                                           : SV_DispatchThreadID) {
  if (id >= num_of_vertices)
    return;

  // Compute new position
  out_vertices[id] = apply_noise(vertices[id]);

  // Compute surface normal
  float diff_angle = 1.0 / sqrt(num_of_vertices / 6.0);
  normals[id] = compute_normal(vertices[id], out_vertices[id], diff_angle);
}

float3 apply_noise(float3 position) {
  // enables ==for readability==
  int shape_enabled = enabled[0].x;
  int general_noise_enabled = enabled[0].y;
  int craters_enabled = enabled[0].z;

  // shape
  float shape = //
      fractal_noise(position, noise_settings_shape) * shape_enabled;
  // crater
  float crater =
      crater_noise(position, noise_settings_crater) * craters_enabled;
  // general
  float general =
      fractal_noise(position, noise_settings_general) * general_noise_enabled;

  // Final height
  float height = (shape + crater + general) / 3;
  height = radius * (1 + height);

  return position * height;
}