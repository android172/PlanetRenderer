// includes
#include "../Includes/Biomes.cginc"
#include "./Includes/Noise/FractalNoise.cginc"
#include "./Includes/ShapeComputeUtil.cginc"
#include "./Includes/SmoothMinMax.cginc"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel compute_shape

// Vertex information
StructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> out_vertices;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<uint> biomes;
uint num_of_vertices;

// Settings
float4 shape_limits;
float4 old_shape_limits;
// Shape Settings
int4 enabled[2];
float4 noise_settings_continent_shape[3];
float4 noise_settings_both[3];
float4 noise_settings_mountains[3];
float4 noise_settings_ocean_mountains[3];
float4 noise_settings_flatness[3];
float4 noise_settings_crater[4];
// Surface specific
float continent_base;
float ocean_depth;
float flatness_ratio;

bool vertex_is_visible(float3 vertex);
bool vertex_was_visible(float3 vertex);
uint compute_biome(NoiseValues noise, float height, float vertex_angle);

// Kernels
[numthreads(256, 1, 1)] void compute_shape(uint id
                                           : SV_DispatchThreadID) {
  if (id >= num_of_vertices)
    return;

  // Check for visibility
  if (!vertex_is_visible(vertices[id])) {
    out_vertices[id] = float3(0, 0, 0);
    return;
  }
  if (vertex_was_visible(vertices[id]))
    return;

  // Compute noise & height
  NoiseValues noise = compute_noise(vertices[id]);
  float height = compute_height(noise);

  // Compute new position
  out_vertices[id] = vertices[id] * height;

  // Compute surface normal
  float diff_angle = 1.0 / sqrt(num_of_vertices / 6.0);
  normals[id] = compute_normal(vertices[id], out_vertices[id], diff_angle);

  // Compute relative angle
  float rel_normal_angle = dot(normals[id], vertices[id]);

  // Compute biome info
  uint biome = compute_biome(noise, height, rel_normal_angle);
  apply_biome(biomes, id, biome);
}

bool vertex_is_visible(float3 vertex) {
  float3 camera_dir = shape_limits.xyz;
  float max_render_angle = shape_limits.w;
  return dot(vertex, camera_dir) >= max_render_angle;
}

bool vertex_was_visible(float3 vertex) {
  float3 camera_dir = old_shape_limits.xyz;
  float max_render_angle = old_shape_limits.w;
  return dot(vertex, camera_dir) >= max_render_angle;
}

uint compute_biome(NoiseValues noise, float height, float vertex_angle) {
  // Ocean biomes
  if (noise.ocean_mask > 0.1) {
    if (height >= 1.f) {
      if (noise.ocean_mask > 0.7)
        return BIOME_ISLAND;
      if (noise.flatness > 0)
        if (noise.ridge_1 + noise.ridge_2 > 0.06)
          return BIOME_MOUNTAINS;
      return BIOME_BEACH;
    }
    if (noise.flatness > 0) {
      if (noise.ridge_2 > 0.06)
        return BIOME_U_MOUNTAINS;
    }
    if (noise.ocean_mask > 0.5)
      return BIOME_DEEP_WATERS;
    return BIOME_UNDERWATER;
  }

  // Crater
  if (noise.crater < -0.001)
    return BIOME_CRATER;
  if (noise.crater > 0.001)
    return BIOME_CRATER_RIDGE;

  // Continent
  if (noise.flatness > 0) {
    if (noise.ridge_1 > 0.14)
      return BIOME_PEAKS;
    if (noise.ridge_1 > 0.06) {
      if (vertex_angle < sqrt(3) / 2.f) // 30 deg
        return BIOME_MOUNTAINS;
      else
        return BIOME_VALLEY;
    }
    if (noise.ridge_1 > 0.02) {
      if (vertex_angle < sqrt(3) / 2.f) // 30 deg
        return BIOME_MOUNTAINS;
      else if (noise.continent_mask < 0.999)
        return BIOME_BEACH;
      return BIOME_FLATLANDS;
    }
  }

  if (noise.continent_mask < 0.999)
    return BIOME_BEACH;
  return BIOME_FLATLANDS;
}

NoiseValues compute_noise(float3 position) {
  // enables ==for readability==
  int continents_enabled = enabled[0].x;
  int general_noise_enabled = enabled[0].y;
  int mountains_enabled = enabled[0].z;
  int ocean_mountains_enabled = enabled[0].w;
  int flatness_enabled = enabled[1].x;
  int craters_enabled = enabled[1].y;

  // continent / ocean mask //
  float continent_height = continent_base - ocean_depth;
  float c_base = continents_enabled *
                 (clamp(fractal_noise(position, noise_settings_continent_shape),
                        ocean_depth, continent_base) -
                  continent_base);
  float continent_mask = (continent_height == 0)
                             ? 1
                             : (c_base + continent_height) / continent_height;
  float ocean_mask = 1 - continent_mask;

  // flatness //
  float flatness =
      (flatness_enabled)
          ? (clamp(fractal_noise(position, noise_settings_flatness),
                   flatness_ratio, flatness_ratio + 0.1) -
             flatness_ratio) /
                0.1
          : 1;

  // continent //
  // mountains
  float ridge_1 = mountains_enabled *
                  ridge_noise(position, noise_settings_mountains) *
                  continent_mask * flatness * 0.1;
  // crater
  float crater = craters_enabled * //
                 crater_noise(position, noise_settings_crater) * continent_mask;

  // ocean //
  // underwater mountains
  float ridge_2 = ocean_mountains_enabled * //
                  ridge_noise_2(position, noise_settings_ocean_mountains) *
                  ocean_mask * flatness * 0.1;

  // both //
  // bumps
  float bumps = general_noise_enabled * //
                fractal_noise(position, noise_settings_both);

  NoiseValues noise_values = {continent_mask, ocean_mask, flatness, c_base,
                              ridge_1,        ridge_2,    crater,   bumps};
  return noise_values;
}

float compute_height(NoiseValues noise) {
  // Final height
  return 1 + (noise.c_base + smax(noise.ridge_1, noise.ridge_2, 8.0) +
              noise.crater + noise.bumps) /
                 4;
}